# Common Security Vulnerabilities

This document describes some of the most critical security vulnerabilities encountered in IT systems, their impact, and basic mitigation strategies.

---

## 1. SQL Injection (SQLi)

**Description:**  
SQL Injection occurs when attackers insert malicious SQL queries into input fields, which are then executed by the database. This can lead to unauthorized data access, data modification, or deletion.

**Example:**  
An attacker enters `' OR '1'='1` into a login form input, bypassing authentication.

**Impact:**  
- Data breach or loss  
- Full database compromise  
- System takeover

**Mitigation:**  
- Use parameterized queries or prepared statements  
- Validate and sanitize user inputs  
- Employ web application firewalls (WAF)  

---

## 2. Cross-Site Scripting (XSS)

**Description:**  
XSS vulnerabilities allow attackers to inject malicious client-side scripts into web pages viewed by other users. These scripts can steal cookies, session tokens, or perform actions on behalf of the victim.

**Types:**  
- Stored XSS (persisted on server)  
- Reflected XSS (in URL or input)  
- DOM-based XSS (client-side only)

**Impact:**  
- User account compromise  
- Credential theft  
- Session hijacking

**Mitigation:**  
- Encode and sanitize all user inputs and outputs  
- Use Content Security Policy (CSP) headers  
- Implement secure frameworks that auto-escape outputs  

---

## 3. Buffer Overflow

**Description:**  
Occurs when a program writes more data to a buffer than it can hold, overwriting adjacent memory. This can lead to crashes or arbitrary code execution.

**Impact:**  
- Application crashes (Denial of Service)  
- Remote code execution  
- Privilege escalation

**Mitigation:**  
- Use safe programming languages or libraries that handle memory securely  
- Perform boundary checks on buffers  
- Apply security patches regularly  

---

## 4. Weak Passwords and Credential Stuffing

**Description:**  
Use of simple, common, or reused passwords makes it easy for attackers to gain unauthorized access using brute-force or stolen credential lists.

**Impact:**  
- Account compromise  
- Data theft  
- Unauthorized access to systems

**Mitigation:**  
- Enforce strong password policies  
- Implement multi-factor authentication (MFA)  
- Monitor and block repeated login failures  

---

## 5. Misconfigured Security Settings

**Description:**  
Incorrectly configured security controls (firewalls, permissions, cloud buckets, etc.) can expose sensitive data or systems unintentionally.

**Examples:**  
- Publicly accessible AWS S3 buckets  
- Open ports on firewalls  
- Excessive user privileges

**Impact:**  
- Data exposure  
- Unauthorized access  
- System exploitation

**Mitigation:**  
- Regular configuration audits  
- Principle of least privilege (PoLP) for access control  
- Use automated security scanning tools  

---

## 6. Insecure Deserialization

**Description:**  
When untrusted data is deserialized by an application, it can lead to remote code execution or privilege escalation.

**Impact:**  
- Remote code execution  
- Denial of service  
- Data manipulation

**Mitigation:**  
- Avoid deserializing untrusted data  
- Use serialization formats that do not allow code execution  
- Implement strict input validation  

---

## 7. Broken Authentication and Session Management

**Description:**  
Flaws in authentication or session management allow attackers to impersonate users or hijack sessions.

**Impact:**  
- Account takeover  
- Data theft  
- Privilege escalation

**Mitigation:**  
- Use secure, tested authentication libraries  
- Implement session timeouts and token invalidation  
- Protect against session fixation and replay attacks  

---

## 8. Security Misconfiguration

**Description:**  
Security misconfiguration can happen at any level of an application stack (servers, databases, frameworks, etc.)

**Impact:**  
- Information disclosure  
- Unauthorized access  
- Exploitation of vulnerable services

**Mitigation:**  
- Harden all servers and services  
- Remove default credentials and accounts  
- Keep software up-to-date with patches

---

## 9. Sensitive Data Exposure

**Description:**  
Exposure of sensitive information (PII, credit card data, etc.) due to inadequate encryption, logging, or storage.

**Impact:**  
- Data breach  
- Regulatory fines  
- Loss of user trust

**Mitigation:**  
- Encrypt sensitive data at rest and in transit  
- Mask data in logs  
- Use secure key management  

---

## 10. Insufficient Logging and Monitoring

**Description:**  
Lack of adequate logging and monitoring allows attackers to persist undetected in systems.

**Impact:**  
- Prolonged attacks  
- Delayed incident response  
- Increased damage

**Mitigation:**  
- Implement centralized logging and alerting  
- Regularly review logs and audit trails  
- Use automated threat detection tools  

---

# Summary

Understanding these vulnerabilities and how attackers exploit them is critical to securing IT environments. Regular vulnerability assessments, patching, and employee training are key components of an effective security program.

